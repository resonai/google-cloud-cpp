google_cloud_cpp_common_hdrs = [
    "future.h",
    "future_generic.h",
    "future_void.h",
    "iam_binding.h",
    "iam_bindings.h",
    "iam_policy.h",
    "internal/backoff_policy.h",
    "internal/big_endian.h",
    "internal/build_info.h",
    "internal/compiler_info.h",
    "internal/conjunction.h",
    "internal/disjunction.h",
    "internal/filesystem.h",
    "internal/format_time_point.h",
    "internal/future_base.h",
    "internal/future_fwd.h",
    "internal/future_impl.h",
    "internal/future_then_impl.h",
    "internal/future_then_meta.h",
    "internal/getenv.h",
    "internal/ios_flags_saver.h",
    "internal/make_unique.h",
    "internal/parse_rfc3339.h",
    "internal/port_platform.h",
    "internal/random.h",
    "internal/invoke_result.h",
    "internal/retry_policy.h",
    "internal/setenv.h",
    "internal/throw_delegate.h",
    "internal/version_info.h",
    "log.h",
    "optional.h",
    "status.h",
    "status_or.h",
    "terminate_handler.h",
    "version.h",
]

google_cloud_cpp_common_srcs = [
    "iam_bindings.cc",
    "iam_policy.cc",
    "internal/backoff_policy.cc",
    "internal/compiler_info.cc",
    "internal/filesystem.cc",
    "internal/format_time_point.cc",
    "internal/future_impl.cc",
    "internal/getenv.cc",
    "internal/parse_rfc3339.cc",
    "internal/random.cc",
    "internal/setenv.cc",
    "internal/throw_delegate.cc",
    "log.cc",
    "status.cc",
    "terminate_handler.cc",
]

# genrule(
#     name = "generate_build_info",
#     srcs = ["internal/build_info.cc.in"],
#     outs = ["internal/build_info.cc"],
#     cmd = """
# V=$$(git rev-parse --short HEAD 2>/dev/null || echo "unknown");
# sed -e "s;@CMAKE_CXX_FLAGS@;$(CC_FLAGS);" \
#     -e "s;\\$${CMAKE_CXX_FLAGS_.*};$(COMPILATION_MODE);" \
#     -e "s;@GOOGLE_CLOUD_CPP_GIT_HEAD@;$${V};" < $< > $@
#   """,
#     toolchains = [
#         "@bazel_tools//tools/cpp:current_cc_toolchain",
#         "@bazel_tools//tools/cpp:cc_flags",
#     ],
# )
ExtCommand(
  'generate_build_info',
  cmd = ['bash', '-c',
         'V=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown"); sed -e "s;@CMAKE_CXX_FLAGS@;$CC_FLAGS;"  -e "s;.{CMAKE_CXX_FLAGS_.*};$COMPILATION_MODE;"  -e "s;@GOOGLE_CLOUD_CPP_BUILD_METADATA@;${V};"  < internal/build_info.cc.in >  internal/build_info.cc'
  ],
  in_buildenv='//devops:ywz-buildenv-base',
  work_dir='third_party/google-cloud-cpp/google/cloud/',
  cmd_env={
    'CC_FLAGS': '-stdlib=libc++',
    'COMPILATION_MODE': 'release',  #TODo now
  },
  cachable=True
)

# cc_library(
#     name = "google_cloud_cpp_common",
#     srcs = google_cloud_cpp_common_srcs + ["internal/build_info.cc"],
#     hdrs = google_cloud_cpp_common_hdrs,
#     deps = [],
# )
CppLib('google_cloud_cpp_common',
       sources=google_cloud_cpp_common_srcs + ['internal/build_info.cc'],
       headers=google_cloud_cpp_common_hdrs,
       deps=[
         ':generate_build_info',
       ],
       in_buildenv='//devops:ywz-buildenv-base',
       build_params={
         'extra_compile_flags' : '-Ithird_party/google-cloud-cpp/'
       },
)
